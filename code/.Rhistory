shiny::runApp('C:/Users/arcarava/Dropbox/GitHub/pop_model_simulations/predator_prey')
runApp('C:/Users/arcarava/Dropbox/GitHub/pop_model_simulations/predator_prey')
runApp('C:/Users/arcarava/Dropbox/GitHub/pop_model_simulations/predator_prey')
runApp('C:/Users/arcarava/Dropbox/GitHub/pop_model_simulations/predator_prey')
install.packages("caTools")
install.packages("caTools", force = T)
df <- data.frame(col1 = sample(rep(0:1,50))
df <- data.frame(col1 = sample(rep(0:1,50)))
df <- data.frame(col1 = sample(rep(0:1,50)))
View(df)
df <- data.frame(col1 = sample(rep(0:1, 50)),
col2 = sample(rep(0:1, 50)),
col3 = sample(rep(0:1, 50)),
col4 = sample(rep(0:1, 50)))
# Reduce multiple binary columns or binary dataframe to single vector
# c = data frame or columns of interest
binRows <- function(c){
d <- as.integer(rowSums(c)>0)
return(d)
}
binRows(df[1:2,])
binRows(df[,1:2])
df <- data.frame(col1 = sample(rep(0:1, 400)),
col2 = sample(rep(0:1, 400)),
col3 = sample(rep(0:1, 400)))
head(df)
rbinom(n=10000, size=1, prob=0.05)
df <- data.frame(col1 = rbinom(n=100, size=1, prob=0.05)),
col2 = rbinom(n=100, size=1, prob=0.25),
col3 = rbinom(n=100, size=1, prob=0.05))
df <- data.frame(col1 = rbinom(n=100, size=1, prob=0.05),
col2 = rbinom(n=100, size=1, prob=0.25),
col3 = rbinom(n=100, size=1, prob=0.05))
head(df)
binRows(df[,1:2])
df <- data.frame(col1 = rbinom(n=100, size=1, prob=0.05),
col2 = rbinom(n=100, size=1, prob=0.25),
col3 = rbinom(n=100, size=1, prob=0.25))
head(df)
binRows(df[,1:2])
# If you only wanted the first two columns
vec1 <- binRows(df[,1:2])
head(vec1)
# If you wanted three columns
vec2 <- binRows(df[,1:3])
head(vec2)
df <- data.frame(sample(1:20, 50))
df <- data.frame(sample(1:20, 50, replace = T))
vec <- sample(1:20, 50, replace = T)
mvec <- mean(vec)
svce <- sd(vec)
sdvec <- sd(vec)
sevec <- sdvce/sqrt(length(vec))
sevec <- sdvec/sqrt(length(vec))
civec <- qt(0.975,df=vec-1)*sdvec/sqrt(vec)
library(RMisc)
library(Rmisc)
install.packages("rmisc")
library(rmisc)
install.packages("Rmisc")
library(Rmisc)
civec <- CI(vec, 0.95)
civec <- CI(vec, 0.95)[1]
civec <- CI(vec, 0.95)[2]
civec <- CI(vec, 0.95)[1,]
civec <- CI(vec, 0.95)
civec <- CI(vec, 0.95)[1]
civec.u <- as.numeric(CI(vec, 0.95)[1])
civec.l <- as.numeric(CI(vec, 0.95)[3])
ggplot()+
geom_bar(aes(y = mvec))
library(ggplot2)
ggplot()+
geom_bar(aes(y = mvec))
df <- (m = rep(mvec, 3),
u = c(mvec+sdvec, mvec+sevec, mvec+civec.u))
c(mvec+sdvec, mvec+sevec, mvec+civec.u)
rep(mvec, 3)
df <- (m = rep(mvec, 3),
u = c(mvec+sdvec, mvec+sevec, mvec+civec.u))
df <- (m = rep(mvec, 3))
u = c(mvec+sdvec, mvec+sevec, mvec+civec.u)
m = rep(mvec, 3)
u = c(mvec+sdvec, mvec+sevec, mvec+civec.u))
l = c(mvec-sdvec, mvec-sevec, mvec-civec.u))
l = c(mvec-sdvec, mvec-sevec, mvec-civec.u)
u = c(mvec+sdvec, mvec+sevec, mvec+civec.u)
df <- data.frame(m, u, l)
df <- data.frame(r = c("SD", "SE", "95% CI"),
m, u, l)
ggplot(df, aes (x = m, y = r))+
geom_bar()
ggplot(df, aes (x = m, y = r))+
geom_bar(stat = "identity")
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity")
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
theme_classic
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
theme_classic()
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))
vec <- sample(1:20, 200, replace = T)
mvec <- mean(vec)
sevec <- sdvec/sqrt(length(vec))
sdvec <- sd(vec)
civec.u <- as.numeric(CI(vec, 0.95)[1])
m = rep(mvec, 3)
civec.l <- as.numeric(CI(vec, 0.95)[3])
u = c(mvec+sdvec, mvec+sevec, mvec+civec.u)
l = c(mvec-sdvec, mvec-sevec, mvec-civec.u)
df <- data.frame(r = c("SD", "SE", "95% CI"),
m, u, l)
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))
vec <- sample(1:300, 200, replace = T)
mvec <- mean(vec)
sdvec <- sd(vec)
sevec <- sdvec/sqrt(length(vec))
civec.u <- as.numeric(CI(vec, 0.95)[1])
civec.l <- as.numeric(CI(vec, 0.95)[3])
m = rep(mvec, 3)
u = c(mvec+sdvec, mvec+sevec, mvec+civec.u)
l = c(mvec-sdvec, mvec-sevec, mvec-civec.u)
df <- data.frame(r = c("SD", "SE", "95% CI"),
m, u, l)
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))
theme_classic()
vec <- sample(1:300, 50, replace = T)
mvec <- mean(vec)
sdvec <- sd(vec)
sevec <- sdvec/sqrt(length(vec))
civec.u <- as.numeric(CI(vec, 0.95)[1])
civec.l <- as.numeric(CI(vec, 0.95)[3])
m = rep(mvec, 3)
u = c(mvec+sdvec, mvec+sevec, civec.u)
l = c(mvec-sdvec, mvec-sevec, civec.l)
df <- data.frame(r = c("SD", "SE", "95% CI"),
m, u, l)
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))
set.seed(42)
vec <- sample(1:25, 200, replace = T)
mvec <- mean(vec)
sdvec <- sd(vec)
sevec <- sdvec/sqrt(length(vec))
civec.u <- as.numeric(CI(vec, 0.95)[1])
civec.l <- as.numeric(CI(vec, 0.95)[3])
m = rep(mvec, 3)
u = c(mvec+sdvec, mvec+sevec, civec.u)
l = c(mvec-sdvec, mvec-sevec, civec.l)
df <- data.frame(r = c("SD", "SE", "95% CI"),
m, u, l)
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))
vec <- sample(1:25, 50, replace = T)
mvec <- mean(vec)
sdvec <- sd(vec)
sevec <- sdvec/sqrt(length(vec))
civec.u <- as.numeric(CI(vec, 0.95)[1])
civec.l <- as.numeric(CI(vec, 0.95)[3])
m = rep(mvec, 3)
u = c(mvec+sdvec, mvec+sevec, civec.u)
l = c(mvec-sdvec, mvec-sevec, civec.l)
df <- data.frame(r = c("SD", "SE", "95% CI"),
m, u, l)
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))
theme_bw()
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_bw()
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_classic()
theme_ac1 <- function(base_family = "serif", base_size_a = 12, base_size_t = 12){
theme_bw(base_family = base_family) %+replace%
theme(
plot.background = element_blank(),
panel.grid = element_blank(),
axis.text = element_text(size = base_size_a),
axis.title = element_text(size=base_size_t,face="bold"),
legend.key=element_rect(colour=NA, fill =NA),
panel.border = element_rect(fill = NA, colour = "black", size=0),
panel.background = element_rect(fill = "white", colour = "black"),
strip.background = element_rect(fill = NA)
)
}
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_ac1() +
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_ac1()
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_ac1(base_size_a = 18, base_size_t = 18)
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_ac1(base_size_a = 18, base_size_t = 18) +
xlab = "statistics"
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_ac1(base_size_a = 18, base_size_t = 18) +
xlab("Statistics")
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_ac1(base_size_a = 18, base_size_t = 18) +
xlab(element_blank())
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_ac1(base_size_a = 18, base_size_t = 18) +
xlab(element_blank()) +
ylab("Number of soot sprites")
df$r <- factor(df$r, levels=c("SD", "SE", "95% CI"))
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_ac1(base_size_a = 18, base_size_t = 18) +
xlab(element_blank()) +
ylab("Number of soot sprites") +
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_ac1(base_size_a = 18, base_size_t = 18) +
xlab(element_blank()) +
ylab("Number of soot sprites")
m = rep(mvec, 4
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
geom_point(data=vec, aes(y=df$m)) +
theme_ac1(base_size_a = 18, base_size_t = 18) +
xlab(element_blank()) +
ylab("Number of soot sprites")
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
geom_point(data=vec) +
theme_ac1(base_size_a = 18, base_size_t = 18) +
xlab(element_blank()) +
ylab("Number of soot sprites")
ggplot(df, aes (x = r, y = m))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=l, ymax=u), width=.2,
position=position_dodge(.9))+
theme_ac1(base_size_a = 18, base_size_t = 18) +
xlab(element_blank()) +
ylab("Number of soot sprites")
ggplot(aes(x = "Data", y = vec)) +
geom_point()
ggplot(aes(x = "Data", y = vec)) +
geom_dotplot()
ggplot(aes(y = vec)) +
geom_dotplot()
v <- sample(1, 20, 50)
v <- sample(1:20, 50)
v <- sample(1:20, 50, replace = T)
v <- sample(20:130, 24, replace = T)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range01(v)
plot(range01(v))
lo <- loess(range01(v)~1:24)
lo <- loess(range01(v)~c(1:24)
lo <- loess(range01(v)~c(1:24))
plot(range01(v),c(1:24))
lines(predict(loess(range01(v)~c(1:24))), col='red', lwd=2)
lines(predict(loess(c(1:24)~range01(v))), col='red', lwd=2)
plot(c(1:24), range01(v))
lines(predict(loess(range01(v)~c(1:24))), col='red', lwd=2)
lines(smooth.spline(range01(v)~c(1:24), spar = 0.35), col='red', lwd=2)
lines(smooth.spline(range01(v)~c(1:24), spar = 0.5), col='red', lwd=2)
lines(spline(range01(v), points, n=100))
lines(spline(1:24, range01(v), n=100))
lines(spline(1:24, range01(v), n=100), col = 2)
plot(c(1:24), range01(v))
lines(spline(1:24, range01(v), n = 100), col = 2)
if(FALSE) {
all your code
}
if(FALSE) {
all your code
}
Annotation
if(FALSE) {
Annotation
}
x <- rand(1:3, 100)
x <- sample(1:3, 100)
x <- sample(1:3, 100, replace = T)
y <- sample(0.15:2.95, 100, replace = T)
glm(x~y)
summary(glm(x~y))
drop1(glm(x~y))
x <- sample(1:10, 100, replace = T)
y <- sample(0.15:2.95, 100, replace = T)
summary(glm(x~y))
drop1(glm(x~y))
drop1(glm(x~y), test = chi)
drop1(glm(x~y), test = "chi")
drop1(glm(x~y), test = "Chisq")
summary(glm(x~y), test = "chi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(DiagrammeR)
install.packages("rsvg")
grViz("digraph flowchart {
graph [compound = true, nodesep = .5, ranksep = .25, color = darkgrey]
node [font = times, shape = rectangle]
# subgraph for R information
subgraph cluster_excluded {
fillcolor = white
graph[compound = true, shape = rectangle]
style = dashed
node [fixedsize = true, width = 3.5, margin = 0.25]
edge [color = white, arrowhead = none, arrowtail = none, length = 0.5]
label = 'Excluded \\n (n = 44)'
A[label = 'No photograph or only one witness \\n (n=18)']
B[label = 'Returned to collection of origin \\n (n=24)']
C[label = 'Records from Northern Ireland \\n (n=2)']
A -> B -> C
}
# subgraph for R information
subgraph cluster_included {
graph[shape = rectangle]
style = dashed
node [fixedsize = true, width = 3.5, margin = 0.25]
edge [color = white, arrowhead = none, arrowtail = none, length = 0.5]
label = 'Included \\n (n = 97)'
D[label = 'Media sources \\n (n=65)']
E[label = 'Local Environmental Records \\n (n=18)']
F[label = 'National Biodiversity Network \\n (n=7)']
G[label = 'Yalden (2013) \\n (n=7)']
D -> E -> F -> G
}
H[label = 'Individual wallaby sightings \\n (n=141)']
H -> A [lhead=cluster_excluded, arrowhead = none]
H -> D [lhead=cluster_included, arrowhead = none]
}
") %>%
export_svg %>% charToRaw %>% rsvg_png("../figures/20200218_flowchart.png")
library(dplyr)
library(DiagrammeRsvg)
library(rsvg)
grViz("digraph flowchart {
graph [compound = true, nodesep = .5, ranksep = .25, color = darkgrey]
node [font = times, shape = rectangle]
# subgraph for R information
subgraph cluster_excluded {
fillcolor = white
graph[compound = true, shape = rectangle]
style = dashed
node [fixedsize = true, width = 3.5, margin = 0.25]
edge [color = white, arrowhead = none, arrowtail = none, length = 0.5]
label = 'Excluded \\n (n = 44)'
A[label = 'No photograph or only one witness \\n (n=18)']
B[label = 'Returned to collection of origin \\n (n=24)']
C[label = 'Records from Northern Ireland \\n (n=2)']
A -> B -> C
}
# subgraph for R information
subgraph cluster_included {
graph[shape = rectangle]
style = dashed
node [fixedsize = true, width = 3.5, margin = 0.25]
edge [color = white, arrowhead = none, arrowtail = none, length = 0.5]
label = 'Included \\n (n = 97)'
D[label = 'Media sources \\n (n=65)']
E[label = 'Local Environmental Records \\n (n=18)']
F[label = 'National Biodiversity Network \\n (n=7)']
G[label = 'Yalden (2013) \\n (n=7)']
D -> E -> F -> G
}
H[label = 'Individual wallaby sightings \\n (n=141)']
H -> A [lhead=cluster_excluded, arrowhead = none]
H -> D [lhead=cluster_included, arrowhead = none]
}
") %>%
export_svg %>% charToRaw %>% rsvg_png("../figures/20200218_flowchart.png")
grViz("digraph flowchart {
graph [compound = true, nodesep = .5, ranksep = .25, color = darkgrey]
node [font = times, shape = rectangle]
# subgraph for R information
subgraph cluster_excluded {
fillcolor = white
graph[compound = true, shape = rectangle]
style = dashed
node [fixedsize = true, width = 3.5, margin = 0.25]
edge [color = white, arrowhead = none, arrowtail = none, length = 0.5]
label = 'Excluded \\n (n = 44)'
A[label = 'No photograph or only one witness \\n (n=18)']
B[label = 'Returned to collection of origin \\n (n=24)']
C[label = 'Records from Northern Ireland \\n (n=2)']
A -> B -> C
}
# subgraph for R information
subgraph cluster_included {
graph[shape = rectangle]
style = dashed
node [fixedsize = true, width = 3.5, margin = 0.25]
edge [color = white, arrowhead = none, arrowtail = none, length = 0.5]
label = 'Included \\n (n = 97)'
D[label = 'Media sources \\n (n=65)']
E[label = 'Local Environmental Records \\n (n=18)']
F[label = 'National Biodiversity Network \\n (n=7)']
G[label = 'Yalden (2013) \\n (n=7)']
D -> E -> F -> G
}
H[label = 'Individual wallaby sightings \\n (n=141)']
H -> A [lhead=cluster_excluded, arrowhead = none]
H -> D [lhead=cluster_included, arrowhead = none]
}
") %>%
export_svg %>% charToRaw %>% rsvg_png("../figures/20200915_flowchart.png")
725*8
401*8
grViz("digraph flowchart {
graph [compound = true, nodesep = .5, ranksep = .25, color = darkgrey]
node [font = times, shape = rectangle]
# subgraph for R information
subgraph cluster_excluded {
fillcolor = white
graph[compound = true, shape = rectangle]
style = dashed
node [fixedsize = true, width = 3.5, margin = 0.25]
edge [color = white, arrowhead = none, arrowtail = none, length = 0.5]
label = 'Excluded \\n (n = 44)'
A[label = 'No photograph or only one witness \\n (n=18)']
B[label = 'Returned to collection of origin \\n (n=24)']
C[label = 'Records from Northern Ireland \\n (n=2)']
A -> B -> C
}
# subgraph for R information
subgraph cluster_included {
graph[shape = rectangle]
style = dashed
node [fixedsize = true, width = 3.5, margin = 0.25]
edge [color = white, arrowhead = none, arrowtail = none, length = 0.5]
label = 'Included \\n (n = 97)'
D[label = 'Media sources \\n (n=65)']
E[label = 'Local Environmental Records \\n (n=18)']
F[label = 'National Biodiversity Network \\n (n=7)']
G[label = 'Yalden (2013) \\n (n=7)']
D -> E -> F -> G
}
H[label = 'Individual wallaby sightings \\n (n=141)']
H -> A [lhead=cluster_excluded, arrowhead = none]
H -> D [lhead=cluster_included, arrowhead = none]
}
") %>%
export_svg %>% charToRaw %>% rsvg_png("../figures/20200915_flowchart.png", width = 5800, height = 3208)
